Temerio genenral jQuery

- Core
 - $(), jQuery() y jQuery.noConflict()
 - $(function() {...}) y $(document).ready(function() {...}); (se	usa document, para evitar false if)
 
- CSS
 - .addClass(claseDeEstilo) -> string que contiene una o mas clases a ser agregadas al elemento. Solo agrega no reemplaza
 - .css(propiedadEstilo | [arregloPropiedadesEstilos]) -> retorna la(s) propiedad(es) pedida del elemento para que se invoca (multipropiuedad desde 1.9)
   .css(propiedadEstilo, valorPropiedad) -> setea la propiedad y su valor al elemento que la invoca (agrega)
   .css("propiedadEstilo: valorPropiedad," ) -> setea la propiedad y su valor al elemento que la invoca (agrega)
   .css("propiedadEstilo: valorPropiedad, propiedadEstilo: valorPropiedad, ..." ) -> setea las propiedades y sus valores al elemento que la invoca (agrega)
   .css({propiedadEstilo: valorPropiedad, propiedadEstilo: valorPropiedad, ...} ) -> setea las propiedades y sus valores al elemento que la invoca (agrega)
 - .hasClass(nombreClase) -> valida si un elemento tiene una clase espesífica
 - .removeClass("nombreClase1 nombreClase2 ...") -> retira una o varias clases si el elemento la(s) tiene asignada(s)
 - .width() | .height()-> obtiene el alto de un objeto html sin unidades
		$( window ).width();// Returns width of browser viewport		
		$( document ).width(); // Returns width of HTML document
   .width(numero ["unidad"]) | .height(numero ["unidad"]) -> setea el alto de un objeto html. Acepta enteros(pixeles), cadenas con unidades o la palabra "auto"

- Atributos y Propiedades
 - .val() -> obtiene el valor actual del elemento que lo invoca (inputs, select, etc)
   .val("valor") -> setea el valor actual del elemento que lo invoca (inputs, select, etc)
   .val([ "valor1", "valor2" ]); -> setea los valores del elemento que lo invoca (selects múltiples)
 - .prop(nombrePropiedad) -> obtiene en valor de la propiedad indicada para el elemento que lo invoca. Si la propiedad no existe retorna undefined
   .prop(nombrePropiedad, value) -> setea el valor de la propiedad indicada al valor indicadom para el o los  elemento(s) que lo invoca(n)
   .prop(nombrePropiedad, value) -> setea el valor de la propiedad indicada al valor indicadom para el o los  elemento(s) que lo invoca(n)
   .prop({nombrePropiedad: value}) -> setea el valor de la propiedad indicada al valor indicadom para el o los  elemento(s) que lo invoca(n)
 - .removeProp(nombrePropiedad) -> quita la propuedad indicada del elemento que lo invoca, la propiedad debe haber sido setead con el metodo .prop() y no ser una propiedad nativa pre existente
    
- Data
 - .data(clave) -> retorna una dato plano almacenado como texto plano en un objeto del DOM, o con esta misma propiedad en jQuery, la clave no deben tener en prefijo "data-"
   .data(clave, valor) -> guarda un dato plano definido por una clave valor para el elemento que lo invoca
   .data({clave: valor}) -> guarda un dato plano definido por una clave valor para el elemento que lo invoca
   .data(clave, objectoJSon) -> guarda un objeto JSON definido por una clave  para el elemento que lo invoca
   Nota: es posible llamar al método data sin  llamarlo desde un selector, sino pasandolo como parámetro: jQuery.data("selector", clave [, valor|json])
 - jQuery.hasData(selector) -> retorna false si el objeto DOM indicado en el selector tiene algun dato tipo data asociado con jQuery (ver si da true con datos puestos manualmente)
   Nota: bindear eventos con jquery cre aun objeto data
 - .removeData() -> eliminar un dato plano almacenado para el elemento que lo invoca, haya sido seatado por jQuery o como parte del DOM
   
- Eventos
 - .resize(handler) -> handler es la función que se ejecutará cuando ocurra una redimencion
   .resize() -> ejecuta el evento resize
   Nota: es un atajo para .on('resize', handler)  o para .trigger( "resize" ), dependiendo e como se le llame
 - .scroll(handler) -> handler es la función que se ejecutará cuando ocurra un evento scroll, aplica a la los divs con overflow:scroll o al elemento window
 - .load(handler) -> handler es la función que se ejecutará cuando todos los sub elementos se han cargado, aplica para el caso de imagenes, scripts, frames, iframes y window.
 - .$( window ).unload(function() {}); -> evento para cuando se sale de la página (seguir link, recargar página, escribir nueva url, boton de adelante y atras)
 
 - .bind(), unbind(), delegate() -> están fuera de uso, y se han eliminado en la última version de jQuery
 - .on(evento(s), handler) -> agrega una función a uno o varios eventos del elemento que lo invoca
   .on(evento(s), [selector], [data], handler) -> agrega una función a uno o varios eventos, permitiendo filtrar elementos hijos y pasar data adicional
   Nota1: return false; detiene la propagación de un evento si esta ha sido atachado un elemento con elementos hijos
   Nota2: es posible pasar un objeto con nombres de eventos como key y funciones como valor como único parametro {click: function(){...}, mouseenter:function(){...}}
 - .one(evento(s) [,data], handler) -> identico a .on() solo que se el evento se remueve luego de ser ejecutado
 - .off() -> remueve todo los eventos del elemento que lo invoca, solo si se añadieron con el método .on()
   .off(enveto(s)) -> remueve uno o varios eventos del elemento que lo invoca, solo si se añadieron con el método .on()
   .off(enveto(s)[,selector] [, handler]) -> remueve uno o varios eventos del elemento que lo invoca, permite filtrar a los elementos hijos a los que aplicará y/o el handler que se removerá
 - .trigger() -> dispara todos los eventos atachados al objeto que lo invoca
   .trigger(evento) -> dispara un evento atachado al objeto que lo invoca
   .trigger(evento [, extraParameters ]) -> dispara un evento atachado al objeto que lo invoca y agregada los datos enviados(evento.data)
 - .triggerHandler() -> identico a .trigger(), pero solo ejecuta eventos atachados con el método .on()
   
 - .blur(handler) -> atajo para .on( "blur", handler ) -> cuando un elemento pierde el foco
   .blur() -> atajo para .trigger("blur")
 - .change(handler) -> atajo para .on( "change", handler ) -> cuando un elemento cambia su valor (input, select, textarea)
   .change() -> atajo para .trigger("change")
 - .focus(handler) -> atajo para .on( "focus", handler ) -> cuando un elemento gana el foco
   .focus() -> atajo para .trigger("focus")
 - .focusin(handler) -> atajo para .on('focusin', handler) -> cuando un elemento hijo gana el foco
   .focusin() -> atajo para .trigger("focusin")
 - .select(handler) -> atajo para .on( "select", handler ) -> cuando se selecciona texto dentro de un input text o un textarea, mejor usar plugins que esto
   .select() -> atajo para .trigger("select")
 - .submit(handler) -> atajo para .on( "submit", handler )
   .submit() -> atajo para .trigger("submit")
 - .keyup(handler) -> atajo para .on( "keyup", handler )
   .keyup() -> atajo para .trigger("keyup")
 - .keypress(handler) -> atajo para .on( "keypress", handler )
   .keypress() -> atajo para .trigger("keypress")
 - .keydown(handler) -> atajo para .on( "keydown", handler )
   .keydown() -> atajo para .trigger("keydown")
 - .focusout(handler) -> atajo para .on( "focusout", handler ) -> cuando un elemento hijo pierde el foco
   .focusout() -> atajo para .trigger("focusout")
 - .click(handler) -> atajo para .on( "click", handler )
   .click() -> atajo para .trigger("click")
 - .dblclick(handler) -> atajo para .on( "dblclick", handler) 
   .dblclick() -> atajo para .trigger("dblclick")
 - .hover(handlerIn, handlerOut) -> atajo para .mouseenter(handlerIn).mouseleave(handlerOut);  
   .hover(handlerUnique) -> atajo para .on( "mouseenter mouseleave", handlerInOut ); 
 - .mousedown(handler) -> atajo para .on( "mousedown", handler)
   .mousedown() -> atajo para .trigger("mousedown")
 - .mouseenter(handler) -> atajo para .on( "mouseenter", handler)
   .mouseenter() -> atajo para .trigger("mouseenter")
 - .mouseleave(handler) -> atajo para .on( "mouseleave", handler)
   .mouseleave() -> atajo para .trigger("mouseleave")
 - .mousemove(handler)-> atajo para .on( "mousemove", handler)
   .mousemove()-> atajo para .trigger("mousemove")
 - .mouseout(handler) -> atajo para .on( "mouseout", handler)
   .mouseout() -> atajo para .trigger("mouseout")
 - .mouseover(handler) -> atajo para .on( "mouseover", handler)
   .mouseover() -> atajo para .trigger("mouseover")
 - .mouseup(handler) -> atajo para .on( "mouseup", handler)
   .mouseup() -> atajo para .trigger("mouseup")

- Manipulación del DOM
 - ver CSS
 - .clone() -> hace una deep copy de los elementos contenidos en elemento invocador, solo html, sin data y sin eventos
 - .clone([incluirDataEventos] [,incluirDataEventosHijos ]) -> hace una deep copy de los elementos contenidos en elemento invocador, los parametros indica si tmbn se copiaran los eventos asociado para el padre y los hijos
 - .append("htmlString") -> inserta el html espesificado como parámetro al final de la lista de elementos internos del elemento que lo invocó
   .appendTo("selector") -> inserta el elemento invocador del metodo en el retornado por el selector enviado como parámetro
 - .prepend() -> igual que .append() pero inserta al inicio de la lista de elementos
   .prependTo("selector") -> igual que .appendTo() pero inserta al inicio de la lista de elementos
 - .text() -> obtiene el texto interno del elemeto y sus hijos(si los tiene) concatenados, no es el valor de input
   .text("texto") -> setea el texto del elemento que lo invoca, reemplaza todo elemento hijo de tenerlo e interpreta los tags como caracteres especiales de texto  
 - .html() -> obtiene una cadena con el contenido html del elemto que lo invoca. no se debe usar para introducir elemento que puedan generar un xss
   .html("htmlString") -> setea el contenido html de su parámetro a el o los elementos que lo invocan.
 - .wrap("htmlString") -> envuelve el elemento invocador (o cada elemento si son varios) con el elemento enviado como parámetro
   .unwrap() -> remueve el elemento padre del elemento que lo invoca, deja el invocador en el lugar del padre.
   .wrapAll("htmlString") -> envuelve a todos los el elementos invocadores en conjunto con el elemento enviado como parámetro
   Nota: para warp y wrapAll el parametro puede puede ser html complejo, pero debe tener solo un nivel final
 - .after("htmlString") -> inserta el elemento enviadao como parámetro luego del elemento invocador en el DOM
   .insertAfter(target) -> insrerta el elemento invocador luego del elemento parámetro en el DOM
   .before("htmlString") -> inserta el elemento enviadao como parámetro antes del elemento invocador en el DOM
   .insertBefore(target) -> insrerta el elemento invocador antes del elemento parámetro en el DOM
 - .remove() -> eliminar uno o varios elementos del DOM
   .remove(selector) -> eliminar uno o varios elementos hijos del invocador filtrando por el selector enviado como parámetro
 - .detach() -> eliminar uno o varios elementos del DOM, retorna un ojbeto jQuery con el DOM eliminado
 - .empty() -> elimina todo los nodos internos del elemento que lo invoca, el texto dentro de la eiqueta tmbn se concidera un nodo interno
 - .replaceWith("htmlString") -> reemplaza el elemento selector con el contenido del parametro y retorna el contenido eliminado
 - .replaceAll(selector) -> como replaceWith, pero con los parçámetros invertidos
  
- Varios
 - jQuery.param(object[, traditional]) -> convierte un objeto o array de objetos en un query string para ser usado en una url
 - .serialize() -> transforma un formulario en un query string para user usando en un url
 - .each(function(index, item)) -> ejecuta una funcion por cada elemento de un arreglo, obejto JSON u objeto DOM, la palabra reservada this.hace referencia al objeto DOM procesado en el momento
 - .get(index) -> obtiene un elemento DOM (como objeto jQuery) de una lista de estos (lista retornada por un método Jquery)
   .get() -> retorna en un arreglo lso elemento de un objeto jQuery (normalmente lo retornados por un selector)
 - .size() -> retorna la cantidad de datos en un objeto jQuery
 - .toArray() -> convierte un objeto jQuery(contenedor de DOM) en un arreglo comun

- Selectores
 - jQuery("*") -> selecciona todos los elementos del DOM incluyendo tags script y link
 - jQuery("[tag][attribute='value']") -> selecciona los elementos que tengan el atributo y el valor exacto
 - jQuery("[attribute!='value']") -> selecciona los elementos que no tenga el atributo indicado o que lo tengan pero no con el valor indicado
   Nota: equivalenta a jQuery(":not([attr='value'])"), de uso no recomendado por performance mejor es usar $( "selector" ).not("[name='value']") 
 - jQuery("[tag][attribute*='value']") -> Como un contains para el parámetro "value"
 - jQuery("[tag][attribute~='value']") -> Como un contains para el parámetro "value", pero solo "palabras" completas (separadas por  espacios en blanco)
 - jQuery("[tag][attribute$='value']") -> Con un endsWith para el parámetro "value"
 - jQuery(":button") -> seleciona todos los input type="button" y todos los buttons, por performance usar jQuery(selector).filter(":button").
 - jQuery(":checkbox") -> selecciona todos los checkboxes en el DOM, por perfomance usar jQuery("input:checkbox")
 - jQuery(":checked")  -> seleccciona todos los checkboxes y radiobuttons chequeados,  tmbn para validar si lo están jquery(selector).is(":checked")
 - jQuery("padre > hijo") -> selecciona todos los hijos des padre indicado, el padre debe ser un selector y el hijo un html tag
 - jQuery(".class") -> selecciona todos los elementos con la clase parametro asignada
 - jQuery("ancestro descendiente ...") -> selecciona todos los elementos que sean descendientes de un padre (#divPrincipal inputs)
   